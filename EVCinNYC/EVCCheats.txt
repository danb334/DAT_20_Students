UPLOADING
Make sure putting anything you ware working on in 
EVC/GA/Upstream/DAT_20_Students/EVCinNYC/

git status
git add --all .
git commit -a -m "explain what uploading"
git push -u origin master

DOWNLOADING
Make sure you are getting the most up-to-date class documents
EVC/GA/DAT_20_NYC
git status
git pull


GETTING DATA
Loading a file into the IP Notebook
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
%matplotlib inline
url = '/Users/EVC/GA/upstream/DAT_20_Students/EVCinNYC/Assigment4/bikeshare.csv'
HAS HEADER ROW
data = pd.read_csv(url)  
DOESN'T HAVE HEADER YOU NEED TO APPLY
names = ['col1name','col2name', etc.]
data = pd.read_csv(url, head=0, names=names)



ANALYZING DATA
data.head()
data.describe()

Note Subsets of Data are denoted within [] right after dataframe name
data[data.runtime<140].describe()
data[['list','of','columns','want','to describe']].describe()

If multiple subsets, then you have to have each if statement in () and & in between
data[(data.runtime<140)&(data.runtime>100)].describe()



SOME USAGE OF [] vs [[]] vs ()
# dataFrame[subset]
# dataFrame[subset][[fields to show as a list/array separated by commas]]
# dataFrame[(subset filter1) & (subset filter2)] multiple subset parameters



CLEANING DATA



GROUPING DATA
bikedays = data.groupby('dteday')
sumbikedays = bikedays.sum()

data[['yr','season','weekday','workingday','casual','registered']].groupby(['workingday','yr','season','weekday']).mean()


VISUALIZING DATA
plt.plot(sumbikedays.casual, label="casual")
plt.plot(sumbikedays.registered, color='r', label="registered")

# visualize the relationship between the features and the response using THREE scatterplots
fig, axs = plt.subplots(1, 3, sharey=True)
    #subplots breaks it down into Multiple graphs
    #subplots (1 row, 3 columns) -- defining canvas (fig); defining axes; if call fig, creates a new canvas
    #fig is a stateful way to signify which canvas working with

data.plot(kind='scatter', x='TV', y='Sales', ax=axs[0], figsize=(16, 8))
    # .plot is defined by pandas and passes to matplotlib
    # if you specify no kind, you'd get 'line'
    # x is declaring column want to see, describing relationship Sales
    # using string to index set of observations; matches the column header
    # ax=axs[0] is first of the subplots (frame areas) areas where you want this
        # if had 2 rows of 3 columns each (six subplots), then wraps so ax=axs(4) would be left on 2nd row
data.plot(kind='scatter', x='Radio', y='Sales', ax=axs[1])
   # don't have to do the figsize each time - the figsize is the WHOLE CANVAS
data.plot(kind='scatter', x='Newspaper', y='Sales', ax=axs[2])



