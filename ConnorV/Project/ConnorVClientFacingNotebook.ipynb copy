{
 "metadata": {
  "name": "",
  "signature": "sha256:be54cfd76600628925079786824a709419ac10f2285a38f9be5051f642de07c9"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Online Product Sales Prediction"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Given a set of data features can you predict the monthly sales of each product?"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "This problem was a challenging one as it gave me a data set with a large amount of features. The first problem I ran into is how do I deal with this many features, and whether doing a feature selection would be helpful. While I tried building linear models with feature selections, what worked best for me was doing a random forest regressor. Because this incorporates a feature selection while it operates, I found most success using the most features I could. This also meant having to fill null feature values rather than removing them. Ultimately I was able to get a reasonably good score that would have placed me around 150th in the kaggle competition, if I were able to submit."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import numpy as np\n",
      "import pandas as pd\n",
      "from sklearn import preprocessing,cross_validation,ensemble,metrics"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "products = pd.read_csv('TrainingDataset.csv')\n",
      "\n",
      "target=['Outcome_M1',\n",
      "        'Outcome_M2',\n",
      "        'Outcome_M3',\n",
      "        'Outcome_M4',\n",
      "        'Outcome_M5',\n",
      "        'Outcome_M6',\n",
      "        'Outcome_M7',\n",
      "        'Outcome_M8',\n",
      "        'Outcome_M9',\n",
      "        'Outcome_M10',\n",
      "        'Outcome_M11',\n",
      "        'Outcome_M12',]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "products.shape\n",
      "\n",
      "X = products.drop(target,axis=1)\n",
      "y = products[target]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 5,
     "metadata": {},
     "source": [
      "There are 751 rows in this dataset, with 546 features and 12 target months. The question is can you predict product sales in each month given 546 different features. These features vary from continuous, categorical and categorical binary values. "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "X.head(10)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Cat_1</th>\n",
        "      <th>Date_1</th>\n",
        "      <th>Quan_1</th>\n",
        "      <th>Quan_2</th>\n",
        "      <th>Quan_3</th>\n",
        "      <th>Quan_4</th>\n",
        "      <th>Date_2</th>\n",
        "      <th>Quan_5</th>\n",
        "      <th>Quan_6</th>\n",
        "      <th>Quan_7</th>\n",
        "      <th>...</th>\n",
        "      <th>Cat_505</th>\n",
        "      <th>Cat_506</th>\n",
        "      <th>Cat_507</th>\n",
        "      <th>Cat_508</th>\n",
        "      <th>Cat_509</th>\n",
        "      <th>Cat_510</th>\n",
        "      <th>Cat_511</th>\n",
        "      <th>Cat_512</th>\n",
        "      <th>Cat_513</th>\n",
        "      <th>Cat_514</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 2</td>\n",
        "      <td> 2485</td>\n",
        "      <td>  918600</td>\n",
        "      <td> 8300</td>\n",
        "      <td>  76</td>\n",
        "      <td>  538046</td>\n",
        "      <td> 2025</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 2</td>\n",
        "      <td> 2499</td>\n",
        "      <td>  981000</td>\n",
        "      <td> 7600</td>\n",
        "      <td>  50</td>\n",
        "      <td>  557614</td>\n",
        "      <td> 1939</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 2</td>\n",
        "      <td> 1778</td>\n",
        "      <td>   31600</td>\n",
        "      <td> 8000</td>\n",
        "      <td>  66</td>\n",
        "      <td> 1119115</td>\n",
        "      <td> 1488</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 2</td>\n",
        "      <td> 2296</td>\n",
        "      <td>  685300</td>\n",
        "      <td> 7900</td>\n",
        "      <td> 101</td>\n",
        "      <td> 1416697</td>\n",
        "      <td> 2018</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> 1</td>\n",
        "      <td> 2835</td>\n",
        "      <td> 2657500</td>\n",
        "      <td> 7600</td>\n",
        "      <td>  81</td>\n",
        "      <td>   58666</td>\n",
        "      <td> 1934</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5</th>\n",
        "      <td> 2</td>\n",
        "      <td> 3360</td>\n",
        "      <td> 2671700</td>\n",
        "      <td> 6900</td>\n",
        "      <td>  98</td>\n",
        "      <td>  428382</td>\n",
        "      <td> 2703</td>\n",
        "      <td> 58</td>\n",
        "      <td> 29</td>\n",
        "      <td> 13</td>\n",
        "      <td>...</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6</th>\n",
        "      <td> 2</td>\n",
        "      <td> 3570</td>\n",
        "      <td> 2936200</td>\n",
        "      <td> 7600</td>\n",
        "      <td>  47</td>\n",
        "      <td>  300522</td>\n",
        "      <td> 3090</td>\n",
        "      <td> 22</td>\n",
        "      <td> 13</td>\n",
        "      <td>  0</td>\n",
        "      <td>...</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7</th>\n",
        "      <td> 2</td>\n",
        "      <td> 3248</td>\n",
        "      <td> 2301100</td>\n",
        "      <td> 6000</td>\n",
        "      <td>  81</td>\n",
        "      <td>   62984</td>\n",
        "      <td> 2304</td>\n",
        "      <td>  9</td>\n",
        "      <td>  1</td>\n",
        "      <td>  3</td>\n",
        "      <td>...</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8</th>\n",
        "      <td> 2</td>\n",
        "      <td> 2891</td>\n",
        "      <td> 1797300</td>\n",
        "      <td> 5900</td>\n",
        "      <td>  69</td>\n",
        "      <td>  641442</td>\n",
        "      <td> 1178</td>\n",
        "      <td> 17</td>\n",
        "      <td>  2</td>\n",
        "      <td>  8</td>\n",
        "      <td>...</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9</th>\n",
        "      <td> 2</td>\n",
        "      <td> 2814</td>\n",
        "      <td> 1411600</td>\n",
        "      <td> 6900</td>\n",
        "      <td> 112</td>\n",
        "      <td>  414785</td>\n",
        "      <td> 2058</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>10 rows \u00d7 546 columns</p>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "   Cat_1  Date_1   Quan_1  Quan_2  Quan_3   Quan_4  Date_2  Quan_5  Quan_6  \\\n",
        "0      2    2485   918600    8300      76   538046    2025     NaN     NaN   \n",
        "1      2    2499   981000    7600      50   557614    1939     NaN     NaN   \n",
        "2      2    1778    31600    8000      66  1119115    1488     NaN     NaN   \n",
        "3      2    2296   685300    7900     101  1416697    2018     NaN     NaN   \n",
        "4      1    2835  2657500    7600      81    58666    1934     NaN     NaN   \n",
        "5      2    3360  2671700    6900      98   428382    2703      58      29   \n",
        "6      2    3570  2936200    7600      47   300522    3090      22      13   \n",
        "7      2    3248  2301100    6000      81    62984    2304       9       1   \n",
        "8      2    2891  1797300    5900      69   641442    1178      17       2   \n",
        "9      2    2814  1411600    6900     112   414785    2058     NaN     NaN   \n",
        "\n",
        "   Quan_7   ...     Cat_505  Cat_506  Cat_507  Cat_508  Cat_509  Cat_510  \\\n",
        "0     NaN   ...           0        0        0        1        0        1   \n",
        "1     NaN   ...           0        0        0        1        0        0   \n",
        "2     NaN   ...           0        0        0        1        0        0   \n",
        "3     NaN   ...           0        0        0        1        0        1   \n",
        "4     NaN   ...           0        0        0        1        0        1   \n",
        "5      13   ...           0        0        0        1        0        1   \n",
        "6       0   ...           0        0        0        1        0        0   \n",
        "7       3   ...           0        0        0        1        0        0   \n",
        "8       8   ...           0        0        0        1        0        0   \n",
        "9     NaN   ...           0        0        0        1        0        0   \n",
        "\n",
        "   Cat_511  Cat_512  Cat_513  Cat_514  \n",
        "0        0        0        0        1  \n",
        "1        0        0        0        1  \n",
        "2        0        0        0        1  \n",
        "3        0        0        0        1  \n",
        "4        0        0        0        1  \n",
        "5        0        0        0        1  \n",
        "6        0        0        0        1  \n",
        "7        0        0        0        1  \n",
        "8        0        0        0        1  \n",
        "9        0        0        0        1  \n",
        "\n",
        "[10 rows x 546 columns]"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y.head(10)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Outcome_M1</th>\n",
        "      <th>Outcome_M2</th>\n",
        "      <th>Outcome_M3</th>\n",
        "      <th>Outcome_M4</th>\n",
        "      <th>Outcome_M5</th>\n",
        "      <th>Outcome_M6</th>\n",
        "      <th>Outcome_M7</th>\n",
        "      <th>Outcome_M8</th>\n",
        "      <th>Outcome_M9</th>\n",
        "      <th>Outcome_M10</th>\n",
        "      <th>Outcome_M11</th>\n",
        "      <th>Outcome_M12</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 10000</td>\n",
        "      <td>  3000</td>\n",
        "      <td> 8000</td>\n",
        "      <td> 3000</td>\n",
        "      <td> 3000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>  8000</td>\n",
        "      <td>  8000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 3000</td>\n",
        "      <td> 2000</td>\n",
        "      <td>  500</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 3000</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>  5000</td>\n",
        "      <td> 15000</td>\n",
        "      <td> 8000</td>\n",
        "      <td> 3000</td>\n",
        "      <td> 3000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 35000</td>\n",
        "      <td>  8000</td>\n",
        "      <td> 8000</td>\n",
        "      <td> 5000</td>\n",
        "      <td> 5000</td>\n",
        "      <td> 3000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 3000</td>\n",
        "      <td> 6000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> 16000</td>\n",
        "      <td>  2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5</th>\n",
        "      <td> 32000</td>\n",
        "      <td>  6000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6</th>\n",
        "      <td> 10000</td>\n",
        "      <td>  3000</td>\n",
        "      <td> 3000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td>  NaN</td>\n",
        "      <td>  NaN</td>\n",
        "      <td>  NaN</td>\n",
        "      <td>  NaN</td>\n",
        "      <td>  NaN</td>\n",
        "      <td>  NaN</td>\n",
        "      <td>  NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7</th>\n",
        "      <td>  2000</td>\n",
        "      <td>  3000</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8</th>\n",
        "      <td> 11000</td>\n",
        "      <td>  3000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 3000</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td> 2000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9</th>\n",
        "      <td>  5000</td>\n",
        "      <td>  2000</td>\n",
        "      <td>  500</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 2000</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "   Outcome_M1  Outcome_M2  Outcome_M3  Outcome_M4  Outcome_M5  Outcome_M6  \\\n",
        "0       10000        3000        8000        3000        3000        2000   \n",
        "1        8000        8000        2000        3000        2000         500   \n",
        "2        5000       15000        8000        3000        3000        2000   \n",
        "3       35000        8000        8000        5000        5000        3000   \n",
        "4       16000        2000        2000         500         500         500   \n",
        "5       32000        6000        2000        2000        2000         500   \n",
        "6       10000        3000        3000        2000        2000         NaN   \n",
        "7        2000        3000         500         500         500         500   \n",
        "8       11000        3000        2000        2000        3000        2000   \n",
        "9        5000        2000         500        2000        2000         500   \n",
        "\n",
        "   Outcome_M7  Outcome_M8  Outcome_M9  Outcome_M10  Outcome_M11  Outcome_M12  \n",
        "0        2000         500         500          500          500          500  \n",
        "1        2000        2000        3000          500          500          500  \n",
        "2        2000        2000        2000          500          500          500  \n",
        "3        2000        3000        6000         2000         2000         2000  \n",
        "4         500         500         500          500          500          500  \n",
        "5         500         500        2000         2000          500          500  \n",
        "6         NaN         NaN         NaN          NaN          NaN          NaN  \n",
        "7         500         500         500          500          500          500  \n",
        "8        2000         500         500          500          500         2000  \n",
        "9         500         500         500          500          500          500  "
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "There were two clear problems starting off. There were NaN values for different features. There also were NaN values for products who had not been sold in those months yet. Because the outcome values varied by much more, and they are more important to building my model I decided to not fill those values. Getting rid of features would make my model worse so I decided to fill those values with the mean of each column. I did this using the Imputer feature of Sci kit learn"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\n",
      "imp = preprocessing.Imputer(copy=False)\n",
      "#replaces the value in line\n",
      "\n",
      "X = pd.DataFrame(imp.fit_transform(X,y),columns=X.columns.values)\n",
      "#creates new DF with transformed value as X\n",
      "\n",
      "X[target]=y\n",
      "#adds targets back into Data Frame \n",
      "\n",
      "X= X.dropna()\n",
      "#Drops rows with incomplete target data\n",
      "\n",
      "y=X[target]#Setting new cleaned data set for y\n",
      "\n",
      "X=X.drop(target,axis=1)\n",
      "#Dropping the targets from the feature Data Frame"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "X.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "(639, 546)"
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "(639, 12)"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "X_train, x_test, y_train, y_test=cross_validation.train_test_split(X, y, test_size=.3, random_state=1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "I decided to use a random forest regressor as it would feature select as it decided on the outcomes"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\n",
      "\n",
      "clf = ensemble.RandomForestRegressor(random_state=1)\n",
      "\n",
      "\n",
      "clf.fit(X_train,y_train)\n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
        "           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n",
        "           min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
        "           n_estimators=10, n_jobs=1, oob_score=False, random_state=1,\n",
        "           verbose=0, warm_start=False)"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y_predicted = clf.predict(x_test)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y_predicted=pd.DataFrame(y_predicted,columns=target)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y_predicted.head(20)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Outcome_M1</th>\n",
        "      <th>Outcome_M2</th>\n",
        "      <th>Outcome_M3</th>\n",
        "      <th>Outcome_M4</th>\n",
        "      <th>Outcome_M5</th>\n",
        "      <th>Outcome_M6</th>\n",
        "      <th>Outcome_M7</th>\n",
        "      <th>Outcome_M8</th>\n",
        "      <th>Outcome_M9</th>\n",
        "      <th>Outcome_M10</th>\n",
        "      <th>Outcome_M11</th>\n",
        "      <th>Outcome_M12</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0 </th>\n",
        "      <td>  3800</td>\n",
        "      <td>  2350</td>\n",
        "      <td>   800</td>\n",
        "      <td>   950</td>\n",
        "      <td>  650</td>\n",
        "      <td>  500</td>\n",
        "      <td>  800</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  650</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1 </th>\n",
        "      <td>  2300</td>\n",
        "      <td>  1850</td>\n",
        "      <td>  1950</td>\n",
        "      <td>   900</td>\n",
        "      <td>  800</td>\n",
        "      <td>  500</td>\n",
        "      <td>  650</td>\n",
        "      <td>  650</td>\n",
        "      <td>  650</td>\n",
        "      <td>  650</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2 </th>\n",
        "      <td>  7300</td>\n",
        "      <td>  4650</td>\n",
        "      <td>  3150</td>\n",
        "      <td>  1750</td>\n",
        "      <td> 1750</td>\n",
        "      <td> 1100</td>\n",
        "      <td> 1250</td>\n",
        "      <td>  900</td>\n",
        "      <td> 1000</td>\n",
        "      <td> 1500</td>\n",
        "      <td>  950</td>\n",
        "      <td>  750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3 </th>\n",
        "      <td> 19700</td>\n",
        "      <td> 10400</td>\n",
        "      <td>  8000</td>\n",
        "      <td>  5800</td>\n",
        "      <td> 4800</td>\n",
        "      <td> 3700</td>\n",
        "      <td> 3100</td>\n",
        "      <td> 2450</td>\n",
        "      <td> 3450</td>\n",
        "      <td> 2250</td>\n",
        "      <td> 1550</td>\n",
        "      <td> 1100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4 </th>\n",
        "      <td>  2400</td>\n",
        "      <td>  1300</td>\n",
        "      <td>  1050</td>\n",
        "      <td>   950</td>\n",
        "      <td>  650</td>\n",
        "      <td>  650</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  650</td>\n",
        "      <td>  650</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5 </th>\n",
        "      <td>  3700</td>\n",
        "      <td>  1500</td>\n",
        "      <td>  1200</td>\n",
        "      <td>  1100</td>\n",
        "      <td>  650</td>\n",
        "      <td>  650</td>\n",
        "      <td> 1150</td>\n",
        "      <td>  750</td>\n",
        "      <td>  950</td>\n",
        "      <td>  800</td>\n",
        "      <td>  650</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6 </th>\n",
        "      <td>  4000</td>\n",
        "      <td>  1800</td>\n",
        "      <td>  1250</td>\n",
        "      <td>  1250</td>\n",
        "      <td>  950</td>\n",
        "      <td>  650</td>\n",
        "      <td>  650</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  800</td>\n",
        "      <td>  650</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7 </th>\n",
        "      <td> 98000</td>\n",
        "      <td> 75100</td>\n",
        "      <td> 16600</td>\n",
        "      <td> 10100</td>\n",
        "      <td> 9200</td>\n",
        "      <td> 5900</td>\n",
        "      <td> 3900</td>\n",
        "      <td> 4700</td>\n",
        "      <td> 5450</td>\n",
        "      <td> 4150</td>\n",
        "      <td> 3600</td>\n",
        "      <td> 2550</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8 </th>\n",
        "      <td> 33600</td>\n",
        "      <td> 20500</td>\n",
        "      <td> 10250</td>\n",
        "      <td>  5900</td>\n",
        "      <td> 4200</td>\n",
        "      <td> 3250</td>\n",
        "      <td> 2350</td>\n",
        "      <td> 2550</td>\n",
        "      <td> 2250</td>\n",
        "      <td> 2050</td>\n",
        "      <td> 2050</td>\n",
        "      <td> 1950</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9 </th>\n",
        "      <td> 37500</td>\n",
        "      <td> 18800</td>\n",
        "      <td>  2850</td>\n",
        "      <td>  2500</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 1650</td>\n",
        "      <td> 1900</td>\n",
        "      <td> 2450</td>\n",
        "      <td> 1250</td>\n",
        "      <td> 1700</td>\n",
        "      <td> 1650</td>\n",
        "      <td> 1250</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10</th>\n",
        "      <td>  3900</td>\n",
        "      <td>  1800</td>\n",
        "      <td>  1200</td>\n",
        "      <td>   900</td>\n",
        "      <td>  900</td>\n",
        "      <td>  800</td>\n",
        "      <td>  650</td>\n",
        "      <td>  800</td>\n",
        "      <td>  900</td>\n",
        "      <td>  800</td>\n",
        "      <td>  800</td>\n",
        "      <td>  800</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11</th>\n",
        "      <td>  6000</td>\n",
        "      <td>  2000</td>\n",
        "      <td>  1500</td>\n",
        "      <td>  1100</td>\n",
        "      <td>  950</td>\n",
        "      <td>  500</td>\n",
        "      <td> 1050</td>\n",
        "      <td>  900</td>\n",
        "      <td>  800</td>\n",
        "      <td>  800</td>\n",
        "      <td>  650</td>\n",
        "      <td>  650</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12</th>\n",
        "      <td>  7500</td>\n",
        "      <td> 14200</td>\n",
        "      <td>  8800</td>\n",
        "      <td>  4150</td>\n",
        "      <td> 4150</td>\n",
        "      <td> 2650</td>\n",
        "      <td> 2000</td>\n",
        "      <td> 1550</td>\n",
        "      <td> 1250</td>\n",
        "      <td> 1100</td>\n",
        "      <td> 1100</td>\n",
        "      <td>  650</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13</th>\n",
        "      <td> 19200</td>\n",
        "      <td> 19000</td>\n",
        "      <td> 13500</td>\n",
        "      <td>  6500</td>\n",
        "      <td> 4400</td>\n",
        "      <td> 3400</td>\n",
        "      <td> 2850</td>\n",
        "      <td> 2150</td>\n",
        "      <td> 1850</td>\n",
        "      <td> 2150</td>\n",
        "      <td> 2550</td>\n",
        "      <td> 2900</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14</th>\n",
        "      <td>  8200</td>\n",
        "      <td>  5600</td>\n",
        "      <td>  3300</td>\n",
        "      <td>  2900</td>\n",
        "      <td> 1400</td>\n",
        "      <td> 1250</td>\n",
        "      <td>  950</td>\n",
        "      <td> 1250</td>\n",
        "      <td>  650</td>\n",
        "      <td> 1100</td>\n",
        "      <td> 1100</td>\n",
        "      <td> 1100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15</th>\n",
        "      <td>  2600</td>\n",
        "      <td>  7550</td>\n",
        "      <td> 10750</td>\n",
        "      <td>  2400</td>\n",
        "      <td> 2200</td>\n",
        "      <td> 1550</td>\n",
        "      <td> 1550</td>\n",
        "      <td>  950</td>\n",
        "      <td>  800</td>\n",
        "      <td>  500</td>\n",
        "      <td>  800</td>\n",
        "      <td>  800</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16</th>\n",
        "      <td>  4000</td>\n",
        "      <td>  2400</td>\n",
        "      <td>   650</td>\n",
        "      <td>  1250</td>\n",
        "      <td> 1250</td>\n",
        "      <td>  650</td>\n",
        "      <td>  900</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>17</th>\n",
        "      <td>  3500</td>\n",
        "      <td>  3150</td>\n",
        "      <td>  1800</td>\n",
        "      <td>  2000</td>\n",
        "      <td> 1500</td>\n",
        "      <td> 1650</td>\n",
        "      <td> 1200</td>\n",
        "      <td> 1300</td>\n",
        "      <td>  900</td>\n",
        "      <td> 1050</td>\n",
        "      <td>  650</td>\n",
        "      <td>  650</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>18</th>\n",
        "      <td>  2100</td>\n",
        "      <td>   500</td>\n",
        "      <td>   500</td>\n",
        "      <td>   500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>19</th>\n",
        "      <td>  2800</td>\n",
        "      <td>   650</td>\n",
        "      <td>  1400</td>\n",
        "      <td>   650</td>\n",
        "      <td>  650</td>\n",
        "      <td> 1250</td>\n",
        "      <td> 1250</td>\n",
        "      <td>  800</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "      <td>  500</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "    Outcome_M1  Outcome_M2  Outcome_M3  Outcome_M4  Outcome_M5  Outcome_M6  \\\n",
        "0         3800        2350         800         950         650         500   \n",
        "1         2300        1850        1950         900         800         500   \n",
        "2         7300        4650        3150        1750        1750        1100   \n",
        "3        19700       10400        8000        5800        4800        3700   \n",
        "4         2400        1300        1050         950         650         650   \n",
        "5         3700        1500        1200        1100         650         650   \n",
        "6         4000        1800        1250        1250         950         650   \n",
        "7        98000       75100       16600       10100        9200        5900   \n",
        "8        33600       20500       10250        5900        4200        3250   \n",
        "9        37500       18800        2850        2500        2000        1650   \n",
        "10        3900        1800        1200         900         900         800   \n",
        "11        6000        2000        1500        1100         950         500   \n",
        "12        7500       14200        8800        4150        4150        2650   \n",
        "13       19200       19000       13500        6500        4400        3400   \n",
        "14        8200        5600        3300        2900        1400        1250   \n",
        "15        2600        7550       10750        2400        2200        1550   \n",
        "16        4000        2400         650        1250        1250         650   \n",
        "17        3500        3150        1800        2000        1500        1650   \n",
        "18        2100         500         500         500         500         500   \n",
        "19        2800         650        1400         650         650        1250   \n",
        "\n",
        "    Outcome_M7  Outcome_M8  Outcome_M9  Outcome_M10  Outcome_M11  Outcome_M12  \n",
        "0          800         500         500          650          500          500  \n",
        "1          650         650         650          650          500          500  \n",
        "2         1250         900        1000         1500          950          750  \n",
        "3         3100        2450        3450         2250         1550         1100  \n",
        "4          500         500         500          650          650          500  \n",
        "5         1150         750         950          800          650          500  \n",
        "6          650         500         500          800          650          500  \n",
        "7         3900        4700        5450         4150         3600         2550  \n",
        "8         2350        2550        2250         2050         2050         1950  \n",
        "9         1900        2450        1250         1700         1650         1250  \n",
        "10         650         800         900          800          800          800  \n",
        "11        1050         900         800          800          650          650  \n",
        "12        2000        1550        1250         1100         1100          650  \n",
        "13        2850        2150        1850         2150         2550         2900  \n",
        "14         950        1250         650         1100         1100         1100  \n",
        "15        1550         950         800          500          800          800  \n",
        "16         900         500         500          500          500          500  \n",
        "17        1200        1300         900         1050          650          650  \n",
        "18         500         500         500          500          500          500  \n",
        "19        1250         800         500          500          500          500  "
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The mectric used to evaluate was the Real Mean Log Squared Error"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "MSE = mean_squared_error(np.log(y_test+1),np.log(y_predicted+1))\n",
      "RMLSE= np.sqrt(MSE)\n",
      "RMLSE"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 40,
       "text": [
        "0.72344025688852354"
       ]
      }
     ],
     "prompt_number": 40
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "This result was ok, but there still is much more I could do to improve it. One idea is to make many of the categorical variables into binary ones using one hot encoder, I would also get rid of some variable with no variance. Another idea is to add a decision tree booster to the ensemble, but my computer lacks the power to build a robust model. I should also figure out how to best deal with the dates as they are hard to use in their current state"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}